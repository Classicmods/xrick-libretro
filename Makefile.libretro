LIBRETRO = ./libretro

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

TARGET_NAME := xrick

ifeq ($(platform), android)
   CC = arm-linux-androideabi-gcc
   AR = @arm-linux-androideabi-ar
   LD = @arm-linux-androideabi-g++ 
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED :=  -Wl,--fix-cortex-a8 -llog -lz -shared -Wl,--version-script=$(LIBRETRO)/core/link.T -Wl,--no-undefined
   PLATFLAGS := -DAND -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), unix)
   CC = gcc
 TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED :=  -lz -lpthread -shared -Wl,--version-script=$(LIBRETRO)/core/link.T -Wl,--no-undefined
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), osx)
   TARGET := libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), wii)
   TARGET := skelsdl_libretro_wii.a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)   
   ZLIB_DIR = $(LIBRETRO)/utils/zlib/
   ZLIB_OBJECTS	:= $(ZLIB_DIR)adler32.o $(ZLIB_DIR)compress.o $(ZLIB_DIR)crc32.o $(ZLIB_DIR)deflate.o \
		$(ZLIB_DIR)gzclose.o $(ZLIB_DIR)gzlib.o $(ZLIB_DIR)gzread.o\
		$(ZLIB_DIR)gzwrite.o $(ZLIB_DIR)infback.o $(ZLIB_DIR)inffast.o $(ZLIB_DIR)inflate.o \
		$(ZLIB_DIR)trees.o $(ZLIB_DIR)inftrees.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)zutil.o 
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) -I$(DEVKITPRO)/libogc/include \
	-D__powerpc__ -D__POWERPC__ -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   SHARED :=   -lm -lpthread -lc
   PLATFLAGS :=  -D__LIBRETRO__ -DALIGN_DWORD
else ifeq ($(platform), ps3)
   TARGET := skelsdl_libretro_ps3.a
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   ZLIB_DIR = $(LIBRETRO)/utils/zlib/
   ZLIB_OBJECTS	:= $(ZLIB_DIR)adler32.o $(ZLIB_DIR)compress.o $(ZLIB_DIR)crc32.o $(ZLIB_DIR)deflate.o \
		$(ZLIB_DIR)gzclose.o $(ZLIB_DIR)gzlib.o $(ZLIB_DIR)gzread.o\
		$(ZLIB_DIR)gzwrite.o $(ZLIB_DIR)infback.o $(ZLIB_DIR)inffast.o $(ZLIB_DIR)inflate.o \
		$(ZLIB_DIR)trees.o $(ZLIB_DIR)inftrees.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)zutil.o 
   SHARED :=   -lm -lpthread -lc
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-D__CELLOS_LV2 -DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) 
   PLATFLAGS :=  -D__LIBRETRO__ -DALIGN_DWORD 
else
   #CC = i586-mingw32msvc-gcc
   CC = x86_64-w64-mingw32-gcc
   PLATFLAGS :=  -D__LIBRETRO__ -DLSB_FIRST -DALIGN_DWORD -DWIN32PORT -DWIN32
   TARGET := $(TARGET_NAME)_libretro.dll
   SHARED := -shared -static-libgcc -s -Wl,--version-script=$(LIBRETRO)/core/link.T -Wl,--no-undefined 
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g
else
   CFLAGS += -O3
endif

CFLAGS += \
	-std=gnu99 -finline-functions -funroll-loops  -fsigned-char  \
	-Wno-strict-prototypes -ffast-math -fomit-frame-pointer -fno-strength-reduce  -fno-builtin -finline-functions -s

CXXFLAGS  +=	$(CFLAGS) -std=gnu++0x
CPPFLAGS += $(CFLAGS)

#START COMMON PART

LIBCOOBJ = $(LIBRETRO)/core/libco
LIBCO_SRCS = $(LIBCOOBJ)/libco.o 

ifeq ($(platform),android)
LIBCO_SRCS += $(LIBCOOBJ)/armeabi_asm.o
else
UNAME_M := $(shell uname -m)
ifneq ($(filter arm%,$(UNAME_M)),)
LIBCO_SRCS += $(LIBCOOBJ)/armeabi_asm.o	
endif
endif

EMU = ./src

XOBJECTS = $(EMU)/unzip.o $(EMU)/data.o $(EMU)/scr_xrick.o $(EMU)/scr_pause.o $(EMU)/scr_imain.o $(EMU)/scr_imap.o\
	 $(EMU)/scr_gameover.o $(EMU)/scr_getname.o $(EMU)/dat_picsPC.o $(EMU)/dat_picsST.o $(EMU)/dat_screens.o\
	 $(EMU)/dat_tilesPC.o $(EMU)/dat_tilesST.o $(EMU)/dat_maps.o $(EMU)/dat_ents.o $(EMU)/dat_spritesST.o\
	 $(EMU)/dat_spritesPC.o $(EMU)/ents.o $(EMU)/e_bullet.o $(EMU)/e_bomb.o $(EMU)/e_rick.o $(EMU)/e_sbonus.o\
	 $(EMU)/e_them.o $(EMU)/e_bonus.o $(EMU)/e_box.o $(EMU)/rects.o $(EMU)/util.o $(EMU)/game.o\
	 $(EMU)/xrick.o $(EMU)/draw.o $(EMU)/maps.o \
	 $(EMU)/sysvid.o $(EMU)/syskbd.o \
	 $(EMU)/control.o $(EMU)/system.o $(EMU)/scroller.o $(EMU)/sysevt.o $(EMU)/sysarg.o $(EMU)/syssnd.o \
	 $(EMU)/sysjoy.o $(EMU)/dat_snd.o

BUILD_APP =  $(XOBJECTS) $(LIBCO_SRCS) $(LIBRETRO)/sdl_wrapp/sdl_primitives.o $(LIBRETRO)/sdl_wrapp/bmp.o

HINCLUDES := -I$(EMU)  -I$(EMU)/../include \
	-I. -I$(LIBRETRO) -I$(LIBRETRO)/core -I$(LIBRETRO)/sdl_wrapp \
	-I$(LIBRETRO)/include 

OBJECTS :=  $(BUILD_APP) $(LIBRETRO)/core/libretro-core.o $(LIBRETRO)/core/core-mapper.o 

#END COMMON PART 

all: $(TARGET)

ifeq ($(platform), wii)
$(TARGET): $(OBJECTS) 
	$(AR) rcs $@ $(OBJECTS) 
else ifeq ($(platform), ps3)
$(TARGET): $(OBJECTS) 
	$(AR) rcs $@ $(OBJECTS) 

else ifeq ($(platform), win)
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz
else ifeq ($(platform), android)
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz
else
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz -lpthread

endif

%.o: %.c
	$(CC) $(fpic) $(CFLAGS) $(PLATFLAGS) $(HINCLUDES) -c -o $@ $<

clean:
	rm -f $(OBJECTS) $(TARGET) 

.PHONY: clean

